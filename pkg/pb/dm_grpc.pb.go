// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DMClient is the client API for DM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DMClient interface {
	CreateGlobalTransaction(ctx context.Context, in *CreateGlobalTransactionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSubTransaction(ctx context.Context, in *CreateSubTransactionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CommitGlobalTransaction(ctx context.Context, in *CommitGlobalTransactionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RollbackGlobalTransaction(ctx context.Context, in *RollbackGlobalTransactionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dMClient struct {
	cc grpc.ClientConnInterface
}

func NewDMClient(cc grpc.ClientConnInterface) DMClient {
	return &dMClient{cc}
}

func (c *dMClient) CreateGlobalTransaction(ctx context.Context, in *CreateGlobalTransactionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/DM/CreateGlobalTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMClient) CreateSubTransaction(ctx context.Context, in *CreateSubTransactionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/DM/CreateSubTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMClient) CommitGlobalTransaction(ctx context.Context, in *CommitGlobalTransactionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/DM/CommitGlobalTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMClient) RollbackGlobalTransaction(ctx context.Context, in *RollbackGlobalTransactionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/DM/RollbackGlobalTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DMServer is the server API for DM service.
// All implementations must embed UnimplementedDMServer
// for forward compatibility
type DMServer interface {
	CreateGlobalTransaction(context.Context, *CreateGlobalTransactionReq) (*emptypb.Empty, error)
	CreateSubTransaction(context.Context, *CreateSubTransactionReq) (*emptypb.Empty, error)
	CommitGlobalTransaction(context.Context, *CommitGlobalTransactionReq) (*emptypb.Empty, error)
	RollbackGlobalTransaction(context.Context, *RollbackGlobalTransactionReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedDMServer()
}

// UnimplementedDMServer must be embedded to have forward compatible implementations.
type UnimplementedDMServer struct {
}

func (UnimplementedDMServer) CreateGlobalTransaction(context.Context, *CreateGlobalTransactionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGlobalTransaction not implemented")
}
func (UnimplementedDMServer) CreateSubTransaction(context.Context, *CreateSubTransactionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubTransaction not implemented")
}
func (UnimplementedDMServer) CommitGlobalTransaction(context.Context, *CommitGlobalTransactionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitGlobalTransaction not implemented")
}
func (UnimplementedDMServer) RollbackGlobalTransaction(context.Context, *RollbackGlobalTransactionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackGlobalTransaction not implemented")
}
func (UnimplementedDMServer) mustEmbedUnimplementedDMServer() {}

// UnsafeDMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DMServer will
// result in compilation errors.
type UnsafeDMServer interface {
	mustEmbedUnimplementedDMServer()
}

func RegisterDMServer(s grpc.ServiceRegistrar, srv DMServer) {
	s.RegisterService(&DM_ServiceDesc, srv)
}

func _DM_CreateGlobalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMServer).CreateGlobalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DM/CreateGlobalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMServer).CreateGlobalTransaction(ctx, req.(*CreateGlobalTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DM_CreateSubTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMServer).CreateSubTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DM/CreateSubTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMServer).CreateSubTransaction(ctx, req.(*CreateSubTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DM_CommitGlobalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitGlobalTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMServer).CommitGlobalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DM/CommitGlobalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMServer).CommitGlobalTransaction(ctx, req.(*CommitGlobalTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DM_RollbackGlobalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackGlobalTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMServer).RollbackGlobalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DM/RollbackGlobalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMServer).RollbackGlobalTransaction(ctx, req.(*RollbackGlobalTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DM_ServiceDesc is the grpc.ServiceDesc for DM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DM",
	HandlerType: (*DMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGlobalTransaction",
			Handler:    _DM_CreateGlobalTransaction_Handler,
		},
		{
			MethodName: "CreateSubTransaction",
			Handler:    _DM_CreateSubTransaction_Handler,
		},
		{
			MethodName: "CommitGlobalTransaction",
			Handler:    _DM_CommitGlobalTransaction_Handler,
		},
		{
			MethodName: "RollbackGlobalTransaction",
			Handler:    _DM_RollbackGlobalTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dm.proto",
}
